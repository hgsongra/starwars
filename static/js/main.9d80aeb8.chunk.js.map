{"version":3,"sources":["Componets/Header.js","Componets/Film.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","id","Film","state","films","displayFilms","favFilms","ls","get","fetchFilms","axios","then","response","setState","data","results","length","forEach","find","f","episode_id","isFav","sortFilmsByFav","sortedFilms","sort","film","reverse","searchHandler","event","searhChars","target","value","toLowerCase","filter","el","title","indexOf","favFilmsHandler","push","alert","fid","set","this","type","placeholder","onChange","map","key","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAqBeA,MAnBf,WACE,OACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,aAGA,yBAAKD,UAAU,2BAA2BE,GAAG,0BAC3C,wBAAIF,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QACO,0BAAMD,UAAU,WAAhB,mB,iCC8FJG,EAvGf,2MACEC,MAAQ,CACNC,MAAO,GACPC,aAAc,GACdC,SAAUC,IAAGC,IAAI,eAAiB,IAJtC,EAOEC,WAAa,WACXC,IAAMF,IAAI,+BAA+BG,MAAK,SAAAC,GAC5C,EAAKC,SAAS,CACZT,MAAOQ,EAASE,KAAKC,QACrBV,aAAcO,EAASE,KAAKC,UAE1B,EAAKZ,MAAMG,SAASU,OAAS,IAC/B,EAAKb,MAAMG,SAASW,SAAQ,SAAAhB,GACf,EAAKE,MAAME,aAAaa,MAAK,SAASC,GAC/C,OAAOA,EAAEC,aAAenB,KAErBoB,OAAQ,KAEf,EAAKR,SAAS,CAAER,aAAc,EAAKF,MAAME,eACzC,EAAKiB,sBArBb,EA0BEA,eAAiB,WACf,IAAIC,EAAc,EAAKpB,MAAME,aAC1BmB,MAAK,SAASC,GACb,OAAOA,EAAKJ,MAAQ,GAAK,KAE1BK,UACH,EAAKb,SAAS,CAAER,aAAckB,KAhClC,EAuCEI,cAAgB,SAAAC,GACd,IAAIC,EAAaD,EAAME,OAAOC,MAAMC,cAClC3B,EAAe,EAAKF,MAAMC,MAAM6B,QAAO,SAAAC,GAErC,OAA4C,IAD1BA,EAAGC,MAAMH,cACRI,QAAQP,MAE/B,EAAKhB,SAAS,CACZR,aAAcA,KA9CpB,EAkDEgC,gBAAkB,SAAApC,GAChB,IAAIwB,EAAO,EAAKtB,MAAME,aAAaa,MAAK,SAASC,GAC/C,OAAOA,EAAEC,aAAenB,KAE1BwB,EAAKJ,OAASI,EAAKJ,MACfI,EAAKJ,OACP,EAAKlB,MAAMG,SAASgC,KAAKrC,GACzBsC,MAAMd,EAAKU,MAAQ,yBAEnB,EAAKhC,MAAMG,SAAW,EAAKH,MAAMG,SAAS2B,QAAO,SAAAO,GAAG,OAAIA,IAAQvC,KAElE,EAAKY,SAAS,CACZR,aAAc,EAAKF,MAAME,aACzBC,SAAU,EAAKH,MAAMG,WAEvBC,IAAGkC,IAAI,aAAc,EAAKtC,MAAMG,UAChC,EAAKgB,kBAlET,mFAoCIoB,KAAKjC,eApCT,+BAqEY,IAAD,OACP,OACE,6BACE,yBAAKV,UAAU,YACb,2BACEA,UAAU,uBACV4C,KAAK,SACLC,YAAY,sBACZC,SAAUH,KAAKf,iBAGnB,yBAAK5B,UAAU,YACb,wBAAIA,UAAU,cACX2C,KAAKvC,MAAME,aAAayC,KAAI,SAAArB,GAE3B,OACE,wBAAI1B,UAAU,sBAAsBgD,IAAKtB,EAAKL,YAC3CK,EAAKU,MACN,4BACEQ,KAAK,SACL5C,UANS,uBAOTiD,QAAS,kBAAM,EAAKX,gBAAgBZ,EAAKL,cACxCK,EAAKJ,MAAQ,aAAe,uBA3FjD,GAA0B4B,aCgBXC,E,iLAbX,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKnD,UAAU,aACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,a,GAPMkD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.9d80aeb8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n      <a className='navbar-brand' href='/'>\n        Star Wars\n      </a>\n      <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n        <ul className='navbar-nav mr-auto'>\n          <li className='nav-item active'>\n            <a className='nav-link' href='/'>\n              Home <span className='sr-only'>(current)</span>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ls from \"local-storage\";\nexport class Film extends Component {\n  state = {\n    films: [],\n    displayFilms: [],\n    favFilms: ls.get(\"favFilmIds\") || []\n  };\n\n  fetchFilms = () => {\n    axios.get(\"https://swapi.co/api/films/\").then(response => {\n      this.setState({\n        films: response.data.results,\n        displayFilms: response.data.results\n      });\n      if (this.state.favFilms.length > 0) {\n        this.state.favFilms.forEach(id => {\n          let film = this.state.displayFilms.find(function(f) {\n            return f.episode_id === id;\n          });\n          film.isFav = true;\n        });\n        this.setState({ displayFilms: this.state.displayFilms });\n        this.sortFilmsByFav();\n      }\n    });\n  };\n\n  sortFilmsByFav = () => {\n    let sortedFilms = this.state.displayFilms\n      .sort(function(film) {\n        return film.isFav ? 1 : -1;\n      })\n      .reverse();\n    this.setState({ displayFilms: sortedFilms });\n  };\n\n  componentDidMount() {\n    this.fetchFilms();\n  }\n\n  searchHandler = event => {\n    let searhChars = event.target.value.toLowerCase(),\n      displayFilms = this.state.films.filter(el => {\n        let searchValue = el.title.toLowerCase();\n        return searchValue.indexOf(searhChars) !== -1;\n      });\n    this.setState({\n      displayFilms: displayFilms\n    });\n  };\n\n  favFilmsHandler = id => {\n    let film = this.state.displayFilms.find(function(f) {\n      return f.episode_id === id;\n    });\n    film.isFav = !film.isFav;\n    if (film.isFav) {\n      this.state.favFilms.push(id);\n      alert(film.title + \"is added to favorite\");\n    } else {\n      this.state.favFilms = this.state.favFilms.filter(fid => fid !== id);\n    }\n    this.setState({\n      displayFilms: this.state.displayFilms,\n      favFilms: this.state.favFilms\n    });\n    ls.set(\"favFilmIds\", this.state.favFilms);\n    this.sortFilmsByFav();\n  };\n\n  render() {\n    return (\n      <div>\n        <div className='row mt-3'>\n          <input\n            className='form-control mr-sm-2'\n            type='search'\n            placeholder='Search by Film name'\n            onChange={this.searchHandler}\n          />\n        </div>\n        <div className='row mt-3'>\n          <ul className='list-group'>\n            {this.state.displayFilms.map(film => {\n              let btnClass = \"ml-2 btn btn-primary\"; //${film.isFav ? 'danger' : 'primary'}\";\n              return (\n                <li className='list-group-item p-3' key={film.episode_id}>\n                  {film.title}\n                  <button\n                    type='button'\n                    className={btnClass}\n                    onClick={() => this.favFilmsHandler(film.episode_id)}>\n                    {film.isFav ? \"UnFavorite\" : \"Favorite\"}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Film;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Componets/Header\";\nimport Film from \"./Componets/Film\";\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <div className='container'>\n          <div className='main'>\n            <Film />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}